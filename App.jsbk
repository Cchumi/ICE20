/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */
'use strict';
import React, {Component} from 'react';
import {
  AppRegistry,
  ActivityIndicator,
  Text,
  View,
  StyleSheet,
  TouchableHighlight,
  Image,
  Alert,
  Platform,
  Animated,
  Dimensions,
  Easing} from 'react-native';
import codePush from "react-native-code-push";

import {
  ViroARSceneNavigator,
} from 'react-viro';




// Array of 3d models that we use in this sample. This app switches between this these models.
/*var objArray = [
  require('./js/res/coffee_mug/object_coffee_mug.vrx'),
  require('./js/res/object_flowers/object_flowers.vrx'),
  require('./js/res/emoji_smile/emoji_smile.vrx')];*/


let codePushOptions = { checkFrequency: codePush.CheckFrequency.ON_APP_RESUME, updateDialog: true, updateTitle: "Mise à jour disponible!", optionalUpdateMessage: "Installer la nouvelle mise à jour ?", optionalIgnoreButtonLabel: "Surtout pas!",
optionalInstallButtonLabel: "Bien sûr!", installMode: codePush.InstallMode.IMMEDIATE };
  /*var updateDialogOptions = {
    updateTitle: "You have an update",
    optionalUpdateMessage: "Update available. Install?",
    optionalIgnoreButtonLabel: "Nop",
    optionalInstallButtonLabel: "Yep",
  };*/

var apiKey = "381814B3-73D4-4B04-B481-FB85528A89BE";
import renderIf from './js/helpers/renderIf';
//import renderscene from './js/Arscene';
var InitialARScene = require('./js/ArMultiMarker/ArMultiMarker');
//var InitialARScene = require('./js/ARBusinessCardOld/BusinessCard');

var {
  width,
  height
} = Dimensions.get('window');


class ICEar extends Component {

  constructor(props) {
    super(props);
    this._renderTrackingScanLine = this._renderTrackingScanLine.bind(this);
    this.changeStateScanline = this.changeStateScanline.bind(this);
    this._onLoadStart = this._onLoadStart.bind(this);
    this._onLoadEnd = this._onLoadEnd.bind(this);
    this._onDisplayDialog = this._onDisplayDialog.bind(this);
    // Set initial state here
    this.state = {
      restartAllowed: true,
      animationScanLine : true,
      isLoading: false,
      viroAppProps: {displayObject:false, animationScanLine : true, yOffset:0, _onLoadEnd: this._onLoadEnd, _onLoadStart: this._onLoadStart, _onTrackingInit:this._onTrackingInit, changeStateScanline:this.changeStateScanline},
    };

    
  }

 
 /* codePushStatusDidChange(syncStatus) {
    switch(syncStatus) {
      case CodePush.SyncStatus.CHECKING_FOR_UPDATE:
        this.setState({ syncMessage: "Checking for update." });
        break;
      case CodePush.SyncStatus.DOWNLOADING_PACKAGE:
        this.setState({ syncMessage: "Downloading package." });
        break;
      case CodePush.SyncStatus.AWAITING_USER_ACTION:
        this.setState({ syncMessage: "Awaiting user action." });
        break;
      case CodePush.SyncStatus.INSTALLING_UPDATE:
        this.setState({ syncMessage: "Installing update." });
        break;
      case CodePush.SyncStatus.UP_TO_DATE:
        this.setState({ syncMessage: "App up to date.", progress: false });
        break;
      case CodePush.SyncStatus.UPDATE_IGNORED:
        this.setState({ syncMessage: "Update cancelled by user.", progress: false });
        break;
      case CodePush.SyncStatus.UPDATE_INSTALLED:
        this.setState({ syncMessage: "Update installed and will be applied on restart.", progress: false });
        break;
      case CodePush.SyncStatus.UNKNOWN_ERROR:
        this.setState({ syncMessage: "An unknown error occurred.", progress: false });
        break;
    }
  }

  codePushDownloadDidProgress(progress) {
    this.setState({ progress });
  }

  toggleAllowRestart() {
    this.state.restartAllowed
      ? CodePush.disallowRestart()
      : CodePush.allowRestart();

    this.setState({ restartAllowed: !this.state.restartAllowed });
  }

  getUpdateMetadata() {
    CodePush.getUpdateMetadata(CodePush.UpdateState.RUNNING)
      .then((metadata: LocalPackage) => {
        this.setState({ syncMessage: metadata ? JSON.stringify(metadata) : "Running binary version", progress: false });
      }, (error: any) => {
        this.setState({ syncMessage: "Error: " + error, progress: false });
      });
  }*/

  /** Update is downloaded silently, and applied on restart (recommended) */
  /*sync() {
    CodePush.sync(
      {},
      this.codePushStatusDidChange.bind(this),
      this.codePushDownloadDidProgress.bind(this)
    );
  }*/

  /** Update pops a confirmation dialog, and then immediately reboots the app */
 /* syncImmediate() {
    CodePush.sync(
      { installMode: CodePush.InstallMode.IMMEDIATE, updateDialog: true },
      this.codePushStatusDidChange.bind(this),
      this.codePushDownloadDidProgress.bind(this)
    );
  }*/
componentWillMount() {
 /*this.position = new Animated.ValueXY(0, 0);
  this.animatedValue = new Animated.Value(0);
    //Animated.timing(this.animatedValue, { toValue: 1, duration: 5000, useNativeDriver: false }).start();
    Animated.loop(
      Animated.sequence([
        Animated.timing(this.animatedValue, { toValue: 1, duration: 3000, easing: Easing.ease, useNativeDriver: true }),
        Animated.timing(this.animatedValue, { toValue: 0, duration: 3000, easing: Easing.ease, useNativeDriver: true }),
      ])).start();*/
  //this.toggleLike(); 
  this._onLoadStart();
}


componentDidMount() {

  //this.syncImmediate.bind(this);
//codePush.sync({ updateDialog: updateDialogOptions});
}



/*renderOverlay = () => {
const lineStyles = [
  styles.lineStyle,
  {
    transform: [
      {
        translateY: this.animatedValue.interpolate({
            inputRange: [0, 1],
            outputRange: [-height/2, height/2]
        })
      }
    ],
  },
];
return (
  <View style={styles.overlay}>
    <Animated.View style={lineStyles} />
  </View>
);
}*/

  changeStateScanline() {
    alert("changed");
    this.setState({
      animationScanLine: !this.state.animationScanLine
    });
  }

  // Invoked when a model has started to load, we show a loading indictator.
  _onLoadStart() {
    this.setState({
      isLoading: true,
    });
  }

  // Invoked when a model has loaded, we hide the loading indictator.
  _onLoadEnd() {
    this.setState({
      isLoading: false,
    });
  }


  _onDisplayDialog() {
    Alert.alert(
    'Scanner un autre objet',
    'Select an object to place in the world!',
    [
      {text: 'Coffee Mug', onPress: () => this._onShowObject(0, "coffee_mug", 0)},
      {text: 'Flowers', onPress: () => this._onShowObject(1, "flowers", .290760)},
      {text: 'Smile Emoji', onPress: () => this._onShowObject(2, "smile_emoji", .497823)},
    ],
    );
  }

    render() {

        return (

          
          <View style={styles.outer} >
          <ViroARSceneNavigator style={styles.arView}
          apiKey={apiKey}
          numberOfTrackedImages={3} 
          initialScene={{scene:InitialARScene, passProps:{animationScanLine:this.state.animationScanLine}}}
          viroAppProps={ this.state.viroAppProps}
          />

          

          <View style={{position: 'absolute',  left: 0, right: 0, bottom: 15, alignItems: 'center'}}>
            <TouchableHighlight style={styles.buttons}
              onPress={this._onDisplayDialog}
              underlayColor={'#00000000'} >
              <Image source={require("./js/res/btn_mode_objects.png")} />
            </TouchableHighlight>
          </View>
        </View>
        )
    }
    _renderTrackingScanLine() {
      //alert(this.state.animationScanLine)
      if(this.state.animationScanLine) {
       // alert(this.state.viroAppProps.animationScanLine)
       // return (this.renderOverlay());
      } else {
        return (<View style={{position:'absolute', left:0, right:0, top:0, bottom:0, alignItems: 'center', justifyContent:'center'}}>
        <ActivityIndicator size='large' animating={this.state.isLoading} color='#ffffff'/>
      </View>);
      }
    }
  } 

//ICE_AR = codePush(ICE_AR);
ICEar = codePush(codePushOptions)(ICEar);

export default ICEar;




const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  helloWorldTextStyle: {
    fontFamily: 'Arial',
    fontSize: 30,
    color: '#ffffff',
    textAlignVertical: 'center',
    textAlign: 'center',
  },
  outer : {
    flex : 1,
  },

  arView: {
    flex:1,
  },

  buttons : {
    height: 80,
    width: 80,
    paddingTop:20,
    paddingBottom:20,
    marginTop: 10,
    marginBottom: 10,
    backgroundColor:'#00000000',
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#ffffff00',
  },
  lineStyle:{
    borderWidth: 4,
    borderColor:'red',
    margin:0,
    top: 0,
    width: width,
    shadowOffset:{ width: 0, height: 4, },
    shadowColor: 'black',
    shadowOpacity: 1.0,
    elevation: 8,
    shadowRadius: 20 ,
    
},

overlay: {
  position:'absolute',
  left:0,
  right:0,
  top:0,
  bottom:0,
  alignItems: 'center',
  justifyContent:'center'
},
overlayHeart: {
  tintColor: '#fff',
},
});
